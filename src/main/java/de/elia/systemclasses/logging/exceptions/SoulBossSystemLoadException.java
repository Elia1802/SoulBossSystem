package de.elia.systemclasses.logging.exceptions;

import de.elia.systemclasses.logging.PluginLogger;
import org.jetbrains.annotations.NotNull;

public class SoulBossSystemLoadException extends Exception {

  private final String message;
  private final PluginLogger pluginLogger = new PluginLogger("SoulBossSystemLoadException");

  public SoulBossSystemLoadException(){
    super();
    this.message = null;
  }

  public SoulBossSystemLoadException(String message){
    super(message);
    this.message = message;
  }

  public SoulBossSystemLoadException(String message, Throwable cause){
    super(message, cause);
    this.message = message;
  }

  public SoulBossSystemLoadException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace){
    super(message, cause, enableSuppression, writableStackTrace);
    this.message = message;
  }

  public void stacktrace(){
    pluginLogger.stackstrace(message, this);
  }

  @NotNull
  public String message(){
    return this.message;
  }

  public static class Check {

    public int v0 = 0;//is loaded
    public int v1 = 1;//Not loaded
    public int v2 = 2;//Error by load
    private int vX;

    public void setV(int v){vX = v;}
    public int getV(){return vX;}

    public void check(String functionName) throws SoulBossSystemLoadException {
      if (vX == v1){
        throw new SoulBossSystemLoadException("The methode/function " + functionName + " is not loaded!");
      }else if (vX == v2) {
        throw new SoulBossSystemLoadException("The methode/function " + functionName + " has an error generated by load!");
      }
    }

  }

}
